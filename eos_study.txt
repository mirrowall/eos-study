区块链EOS开发：
打日志的方式进行调试。若想在命令行中将合约日志打印出来，需要在启动nodeos的时候传入--contracts-console


1.下载源码，然后运行 eos_build.sh开始编译，直至编译成功
2. 首先要生成创世节点， 生成创世节点的步骤：
第一次启动
./nodeos -e -p eosio --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin

运行此命令， 可在$HOME/.local/share/eosio/nodeos 生成 config 和 data 文件夹
修改config/config.ini 文件：
producer-name=eosio  一定要叫eosio, 不清楚为什么，待详细查看源码
原因： /home/miwoo/workspace/blockchain/eos/libraries/chain/include/eosio/chain/config.hpp:26 定义创世用户名称，可以在这里改

修改 config/config.ini 的signature-provider, 这个值一定要和genesis.json 的一致
修改config/config.ini的enable-stale-production=true, 创世结点的此值为true, 其它为false

增加plugin
plugin = eosio::chain_api_plugin
plugin = eosio::history_api_plugin
plugin = eosio::chain_plugin
plugin = eosio::history_plugin
plugin = eosio::net_plugin
plugin = eosio::net_api_plugin
plugin = eosio::producer_plugin
然后运行 nodeos --config-dir config --data-dir data --genesis-json ./genesis.json 便可以正常运行

3. 创建钱包
cleos wallet create --file ./wallet/miwoo.txt
生成的私钥在 miwoo.txt中

创建自定义名称的钱包（./cleos wallet create -n xxx
给钱包上锁（./cleos wallet lock -n xxx）
解锁钱包（./cleos wallet unlock -n xxx --password pasxxxxxxxxxxxxxxxxxxx）
查看钱包中的keys（./cleos wallet keys）
./cleos wallet list
创建密钥（./cleos create key）
向wallet导入key（./cleos wallet import private-key）
创建账户（./cleos create account ${authorizing_account} ${new_account} ${owner_key} ${active_key} ）
4、查看账户信息（./cleos get account -j ${accountName}）
5、根据公钥获得账户列表（./cleos get accounts ${public-key}）


eos wallet passwd: PW5KfVQTPyMJ7h2D3wtFBrPrW7gUF48vZ7tGD3NV4RE2eeegHCwb5
miwoo wallet passwd: PW5KTNsyjpny9i7W17RsXJDuKetm5ERWK6csZjCZ66NNKWEv5p4nF
pangxl wallet passwd: PW5JMjYS77tKtaonwwyPSXemS9LkHAfdjscUiJfjMyh5FNXmjoakU


节点1的key
5KKJZzK3fqoHbFFevRrzX7r1Gb8DtvnC82BAZEhrS7aqRtxpkth
EOS6FwkA7gn9a46LbmJWuRCXdZYW9jznckVKXcZTHYbcFBAB9VcNC

节点2的key
Private key: 5KMScMjrJhH8vMn47nuBdNx9fBCmPvM6ZXAwKE7ktV14BhLcg32
Public key: EOS5mTSfnAcfxJ6xUVZvyfaqY2cDL87RLcFpUsWRJ85iePz21dU1e

用户1的key
private key: 5J6YHicUZZiEViWe3MCQD2vdCC99WW8VHhCQST5NaHScYQibwLy
public_key: EOS8kLLKdikhpY99EWSj8L8HHLSyE8xiRQW9mZAXxcf5thYK2LCzM

用户2的key
Private key: 5Jp45FkidCYQYG24n1capNNi2MxK74dgWrbZqTARy2ZuFSfTYmn
Public key: EOS6Ds2dqrfcEELSzMnytNWCaRC6VwQfistJ77j1vuzaQoyw3wga5

第一次启动
./nodeos -e -p eosio --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin

修改 /home/fengwork/.local/share/eosio/nodeos/config/config.ini
block-log-dir = blocks
enable-stale-production = true
#required-participation = true
shared-file-dir = blockchain
shared-file-size = 8192
readonly = 0
send-whole-blocks = true
http-server-address = 127.0.0.1:8888
p2p-listen-endpoint = 0.0.0.0:9876
p2p-server-address = localhost:9876
allowed-connection = any

required-participation = 33
private-key = ["EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV","5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3"]
producer-name = eosio
plugin = eosio::producer_plugin
plugin = eosio::chain_api_plugin
plugin = eosio::history_plugin
plugin = eosio::history_api_plugin
plugin = eosio::wallet_plugin
plugin = eosio::wallet_api_plugin
plugin = eosio::net_plugin
plugin = eosio::net_api_plugin
plugin = eosio::chain_plugin
wallet-dir = "."

再次运行: ./nodes   如果异常退出， database dirty, 运行 ./nodes --delete-all-blocks




在搞链之前：
systemAccounts = [
    'eosio.bpay',
    'eosio.msig',
    'eosio.names',
    'eosio.ram',
    'eosio.ramfee',
    'eosio.saving',
    'eosio.stake',
    'eosio.token',
    'eosio.upay',
]
这些用户一定要有
cleos create account eosio eosio.bpay EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
cleos create account eosio eosio.msig EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
cleos create account eosio eosio.names EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
cleos create account eosio eosio.ram EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
cleos create account eosio eosio.ramfee EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
cleos create account eosio eosio.saving EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
cleos create account eosio eosio.stake EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
cleos create account eosio eosio.token EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
cleos create account eosio eosio.upay EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV

cleos set contract eosio.token ./eosio.token -p eosio.token
cleos set contract eosio ./eosio.bios -p eosio
cleos push action eosio.token create '["eosio", "1000000000.0000 SYS",0,0,0]' -p eosio.token
cleos push action eosio.token issue '["eosio", "1000000000.0000 SYS", "issue"]' -p eosio
cleos get currency balance eosio.token eosio

cleos set contract eosio ./eosio.system
cleos system newaccount eosio factsiotest1 EOS8kLLKdikhpY99EWSj8L8HHLSyE8xiRQW9mZAXxcf5thYK2LCzM EOS8kLLKdikhpY99EWSj8L8HHLSyE8xiRQW9mZAXxcf5thYK2LCzM --stake-net '50.00 SYS' --stake-cpu '50.00 SYS'  --buy-ram '10.0000 SYS'
executed transaction: e2e34b76648ef9c9c9e41ebae71bcca67e6cbd99d39fb00ac7bf5f7da740a4d7  344 bytes  3801 us
#         eosio <= eosio::newaccount            {"creator":"eosio","name":"factsiotest1","owner":{"threshold":1,"keys":[{"key":"EOS8kLLKdikhpY99EWSj...
#         eosio <= eosio::buyram                {"payer":"eosio","receiver":"factsiotest1","quant":"10.0000 SYS"}
#   eosio.token <= eosio.token::transfer        {"from":"eosio","to":"eosio.ram","quantity":"9.9500 SYS","memo":"buy ram"}
#         eosio <= eosio.token::transfer        {"from":"eosio","to":"eosio.ram","quantity":"9.9500 SYS","memo":"buy ram"}
#     eosio.ram <= eosio.token::transfer        {"from":"eosio","to":"eosio.ram","quantity":"9.9500 SYS","memo":"buy ram"}
#   eosio.token <= eosio.token::transfer        {"from":"eosio","to":"eosio.ramfee","quantity":"0.0500 SYS","memo":"ram fee"}
#         eosio <= eosio.token::transfer        {"from":"eosio","to":"eosio.ramfee","quantity":"0.0500 SYS","memo":"ram fee"}
#  eosio.ramfee <= eosio.token::transfer        {"from":"eosio","to":"eosio.ramfee","quantity":"0.0500 SYS","memo":"ram fee"}
#         eosio <= eosio::delegatebw            {"from":"eosio","receiver":"factsiotest1","stake_net_quantity":"50.0000 SYS","stake_cpu_quantity":"5...
#   eosio.token <= eosio.token::transfer        {"from":"eosio","to":"eosio.stake","quantity":"100.0000 SYS","memo":"stake bandwidth"}
#         eosio <= eosio.token::transfer        {"from":"eosio","to":"eosio.stake","quantity":"100.0000 SYS","memo":"stake bandwidth"}

cleos get account facts1

cleos system regproducer factsiotest1 EOS6FwkA7gn9a46LbmJWuRCXdZYW9jznckVKXcZTHYbcFBAB9VcNC http://localhost:8889

cleos push action eosio.token transfer '["eosio", "factsiotest1", "200000.0000 SYS", "vote"]' -p eosio
cleos push action eosio.token transfer '["eosio", "factsiotest2", "200000.0000 SYS", "vote"]' -p eosio
cleos push action eosio.token transfer '["eosio", "factsiotest2", "200000.0000 SYS", "vote"]' -p eosio

cleos system delegatebw factsiotest1 factsiotest1 "150000.0000 SYS" "150000.0000 SYS"
cleos system delegatebw factsiotest1 factsiotest1 "150000.0000 SYS" "150000.0000 SYS"
cleos system delegatebw factsiotest3 factsiotest3 "100000.0000 SYS" "100000.0000 SYS"

cleos system voteproducer prods factsiotest1 factsiotest1
cleos system voteproducer prods factsiotest2 factsiotest1
cleos system voteproducer prods factsiotest3 factsiotest1

cleos system listproducers
cleos get table eosio eosio voters
cleos get table eosio eosio producers
cleos get table eosio facts1 delband
cleos get table eosio.token eosio accounts


cleos system undelegatebw facts1 facts1 "50000.0000 SYS" "50000.0000 SYS"
cleos system unregprod facts2

cleos set contract factsiotest1 ./hello -p factsiotest1
cleos push action factsiotest1 hi '["factsiotest1"]' -p factsiotest1

cleos get account factsiotest1

cleos set account permission bob active '{"threshold": 1,"keys": [{"key": "EOS8kLLKdikhpY99EWSj8L8HHLSyE8xiRQW9mZAXxcf5thYK2LCzM","weight": 1}],"accounts": [{"permission":{"actor":"dice","permission":"eosio.code"},"weight":1}]}' owner -p bob

编译分析：
//TODO, 在编译 eos/libraries/wasm-jit/Source/Programs 的时候，发生了错误，链接出错，故在此注释掉了部分代码，后续分析


代码分析：
appbase:
	定义了基本的框架，application.hpp 是nodeos的基本框架，  
	plugin.hpp 所有的plugin的基本框架
	注意：
	abstract_plugin 定义了以下三个主要的虚函数
	         virtual void initialize(const variables_map& options) = 0;
           	 virtual void startup() = 0;
	         virtual void shutdown() = 0;
	plugin 从 abstract_plugin继承下来，但是并没有在这三个函数直接写功能代码，而是又实现了
		plugin_initialize
		plugin_startup
		plugin_shutdown
	这三个函数即没有继承，也没有重载，只是用模板类来调用
	目前不太清楚为什么要这么写，要是我写的话，直接放在子类的实现函数
nodeos: 
代码位于 program/nodeos/main.cpp
	 加载了四个基本的 plugin(chain_plugin, http_plugin, net_plugin, producer_plugin)
	然后分别初始化plugin, 并且start

PLUGIN 分析：
	
四个基本plugins:
chain_plugin:	
producer_plugin:
net_plugin:
http_plugin:

合约分析：
eosio.token 合约分析 https://www.jianshu.com/p/714bb9d19784
用来创建和转帐的

eosio.msig 合约分析 https://www.jianshu.com/p/15ceb5a5b07c
用于提案和多重签名交易 

eosio.system 合约分析 https://www.jianshu.com/p/61d2faaa28ec https://www.jianshu.com/p/68198dedf635
创建账户、投票选举超级节点、质押资源、域名竞拍等

eos/plugins/wallet_plugin/wallet_manager.cpp
line 14, password prefix = PW,  如里需要改钱包私钥，可以在这里改


cleos create account eosio eosio.bpay EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV
实际上是调用 cleos/main.cpp 里的 create_account_subcommand, 注意其中的simple参数，此值为判断用户的创建方式，如果为true, 则创建一个默认1000CPU的action, 如果为false, 则认为是system合约创建， 需要检查cpu及ram
步骤：
cleos/httpc.hpp 定义了若干需要的地址
send_actions->push_actions->push_transaction->get_info(会通过HTTP调用chain_plugin的get_info)->determine_required_keys(会通过wallet_url调用wallet_plugin, 然后通过get_required_keys去验证私钥)生成一个sign_transaction， 然后调用chain_base里的push_transaction， 生成一个区块

在chain_plugin里
void read_write::push_transaction
实际上是调用 app().get_method<incoming::methods::transaction_async>()
这个函数是 在produce_plugin里， 
my->_incoming_transaction_async_provider = app().get_method<incoming::methods::transaction_async>().register_provider([this](const packed_transaction_ptr& trx, bool persist_until_expired, next_function<transaction_trace_ptr> next) -> void {
      return my->on_incoming_transaction_async(trx, persist_until_expired, next );
   });
在这里赋的值，然后通过此函数，调用至 produce_plugin 里的 on_incoming_transaction_async 的函数里， 再调用到 chain_plugin 里的 controller::push_transaction 里， 然后通过send_response返回状态




